Objects and Classes in Java
In object-oriented programming technique, we design a program using objects and classes.
An object in Java is the physical as well as a logical entity, whereas, a class in Java is a logical entity only.
What is an object in Java

An entity that has state and behavior is known as an object e.g., chair, bike, marker, pen, table, car, etc. It can be physical or logical (tangible and intangible). The example of an intangible object is the banking system.

An object has three characteristics:
State: represents the data (value) of an object.
Behavior: represents the behavior (functionality) of an object such as deposit, withdraw, etc.
Identity: An object identity is typically implemented via a unique ID. The value of the ID is not visible to the external user. However, it is used internally by the JVM to identify each object uniquely.

An object is an instance of a class.
Object Definitions:
o	An object is a real-world entity.
o	An object is a runtime entity.
o	The object is an entity which has state and behavior.
o	The object is an instance of a class.
What is a class in Java
A class is a group of objects which have common properties. It is a template or blueprint from which objects are created. It is a logical entity. It can't be physical.
A class in Java can contain:
o	Fields
o	Methods
o	Constructors
o	Blocks
o	Nested class and interface

Syntax to declare a class:
class <class_name>{  
    fields;  
    methods;  
}  
Method in Java
In Java, a method is like a function which is used to expose the behavior of an object.
Advantage of Method
o	Code Reusability
o	Code Optimization
new keyword in Java
The new keyword is used to allocate memory at runtime. All objects get memory in Heap memory area.
//Defining a Student class.  
class Student{  
 //defining fields  
 int id;//field or data member or instance variable  
 String name;  
 //creating main method inside the Student class  
 public static void main(String args[]){  
  //Creating an object or instance  
  Student s1=new Student();//creating an object of Student  
  //Printing values of the object  
  System.out.println(s1.id);//accessing member through reference variable  
  System.out.println(s1.name);  
 }  
} 


3 Ways to initialize object
There are 3 ways to initialize object in Java.
1.	By reference variable
2.	By method
3.	By constructor
 
1) Object and Class Example: Initialization through reference
File: TestStudent2.java
class Student{  
 int id;  
 String name;  
}  
class TestStudent2{  
 public static void main(String args[]){  
  Student s1=new Student();  
  s1.id=101;  
  s1.name="ANIL";  
  System.out.println(s1.id+" "+s1.name);//printing members with a white space  
 }  
}  
Output:
101 ANIL
2) Object and Class Example: Initialization through method
File: TestStudent4.java
class Student{  
 int rollno;  
 String name;  
 void insertRecord(int r, String n){  
  rollno=r;  
  name=n;  
 }  
 void displayInformation(){
   System.out.println(rollno+" "+name);
 }  
}  
class TestStudent4{  
 public static void main(String args[]){  
  Student s1=new Student();  
  Student s2=new Student();  
  s1.insertRecord(111,"MOM ");  
  s2.insertRecord(222,"IT");  
  s1.displayInformation();  
  s2.displayInformation();  
 }  
}  
Output:
		111 MOM
222 IT
 
3) Object and Class Example: Initialization through a constructor

TestEmployee.java:
class Employee{  
    int id;  
    String name;  
    float salary;  
    Employee(int id,String name, float salary){
 	this.id=id;
	this.name=name;
	this.salary=salary;
   }
    void display(){System.out.println(id+" "+name+" "+salary);}  
}  
public class TestEmployee {  
public static void main(String[] args) {  
    Employee e1=new Employee(101,"MOM",45000);  
    e1.display();  
}  
}


Anonymous object
Ex:	new Calculation();//anonymous object  

Calling method through a reference:
	Ex:
Calculation c=new Calculation();  
c.fact(5); // here 5 is actual arguments  

Calling method through an anonymous object
Ex:
new Calculation().fact(5);
class Calculation{
Calculation(){
}
void fact(int n){
int i,fact=1;
 for(i=1;i<=n;i++){
   fact=fact*I;
}
System.out.println(“Fact is “+fact);
}

public static void main(String[] args){
    new Calculation().fact(5);
}
}
